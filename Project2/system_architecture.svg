```mermaid
%% Data Architecture
erDiagram
    CUSTOMERS {
        int customerNumber PK
        string customerName
        string contactLastName
        string contactFirstName
        string phone
        string addressLine1
        string addressLine2
        string city
        string state
        string postalCode
        string country
        int salesRepEmployeeNumber
        decimal creditLimit
    }

%% Application Architecture
graph TB
    subgraph FRONTEND["Frontend (React)"]
        direction TB
        subgraph Components["Components"]
            CustomerList["CustomerList"]
            CustomerForm["CustomerForm"]
            Navbar["Navbar"]
            Dialog["Dialog"]
        end
        
        subgraph State["State Management"]
            Hooks["React Hooks"]
            Props["Props"]
            Context["Context API"]
        end
        
        subgraph UI["UI Layer"]
            MaterialUI["Material-UI v5"]
            Router["React Router v6"]
            Axios["Axios"]
        end
    end

    subgraph BACKEND["Backend (Express.js)"]
        subgraph API["API Layer"]
            Routes["Routes"]
            CORS["CORS Middleware"]
        end
        
        subgraph Business["Business Layer"]
            Controllers["Controllers"]
            Validation["Data Validation"]
            ErrorHandling["Error Handling"]
        end
        
        subgraph Data["Data Layer"]
            Models["Sequelize Models"]
            ORM["Sequelize ORM"]
            MySQL2["MySQL2 Driver"]
        end
    end

    Components --> State
    Components --> UI
    UI -->|HTTP/REST| API
    API --> Business
    Business --> Data

%% Infrastructure Architecture
graph TB
    subgraph DockerEnv["Docker Environment"]
        subgraph Containers["Container Architecture"]
            Frontend["Frontend Container\nNode.js 18 Alpine\nPort: 3000"]
            Backend["Backend Container\nNode.js 18 Alpine\nPort: 5000"]
            Database["MySQL Container\nMySQL 8.0\nPort: 3307"]
        end

        subgraph Volumes["Volumes"]
            FrontendVol["Frontend Source"]
            BackendVol["Backend Source"]
            DBVol["Database Persistence"]
        end

        subgraph Network["Network Configuration"]
            Internal["Internal Network"]
            PortMapping["Port Mapping\n3000:3000\n5000:5000\n3307:3306"]
        end

        subgraph Security["Security"]
            CORS_SEC["CORS Protection"]
            EnvVars["Environment Variables"]
            Isolation["Container Isolation"]
        end
    end

    Frontend --> Internal
    Backend --> Internal
    Database --> Internal
    Internal --> PortMapping
    Frontend --> FrontendVol
    Backend --> BackendVol
    Database --> DBVol

    style DockerEnv fill:#f5f5f5,stroke:#333,stroke-width:2px
    style Containers fill:#e3f2fd,stroke:#333,stroke-width:1px
    style Volumes fill:#c8e6c9,stroke:#333,stroke-width:1px
    style Network fill:#fff3e0,stroke:#333,stroke-width:1px
    style Security fill:#fce4ec,stroke:#333,stroke-width:1px
    style FRONTEND fill:#bbdefb,stroke:#333,stroke-width:2px
    style BACKEND fill:#c8e6c9,stroke:#333,stroke-width:2px
    style Components fill:#e3f2fd,stroke:#333,stroke-width:1px
    style State fill:#fff3e0,stroke:#333,stroke-width:1px
    style UI fill:#f3e5f5,stroke:#333,stroke-width:1px
    style API fill:#e8eaf6,stroke:#333,stroke-width:1px
    style Business fill:#fff3e0,stroke:#333,stroke-width:1px
    style Data fill:#e0f2f1,stroke:#333,stroke-width:1px
``` 